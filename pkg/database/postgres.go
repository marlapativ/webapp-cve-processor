package database

import (
	"fmt"
	"os"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
	"gorm.io/gorm/schema"
)

type postgresGormDataSource struct {
	db *gorm.DB
}

func NewPostgresGormDataSource() GormDataSource {
	ds := postgresGormDataSource{}
	ds.Init()
	return &ds
}

func (ds *postgresGormDataSource) Init() {

	connString := fmt.Sprintf("host=%v user=%v password=%v dbname=%v port=%v",
		os.Getenv("DB_HOST"),
		os.Getenv("DB_USER"),
		os.Getenv("DB_PASSWORD"),
		os.Getenv("DB_DATABASE"),
		os.Getenv("DB_PORT"))

	db, err := gorm.Open(postgres.Open(connString), &gorm.Config{
		Logger: logger.Default.LogMode(logger.Silent),
		NamingStrategy: schema.NamingStrategy{
			TablePrefix: "cve.",
		},
	})

	if err != nil {
		panic("DB connection failure")
	}

	println("DB connected")
	ds.db = db
}

func (ds *postgresGormDataSource) Get() *gorm.DB {
	return ds.db
}
