package processor

import (
	"archive/zip"
	"encoding/json"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"sort"
	"strconv"
	"time"

	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/constants"
	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/models"
	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/repository"
	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/util"
)

type cveProcessor struct {
	repository repository.CveRepository
}

func NewCveProcessor(repository repository.CveRepository) CveProcessor {
	return &cveProcessor{
		repository: repository,
	}
}

func (p *cveProcessor) Process(zipFilePath string, downloadDir string) { // TODO: PROGRESS TRACKING LOGIC

	if err := Unzip(zipFilePath, downloadDir); err != nil {
		panic(fmt.Sprintf("Cve list unzipping failed : %v", err))
	}

	cveMap := make(map[int][]string)
	WalkAndProcessJSON(downloadDir, cveMap)


	var batchCount int = 0
	var timeInit time.Time = time.Now()
	var years []int
	for k := range cveMap {
		sort.Strings(cveMap[k])
		years = append(years, k)
	}

	sort.Ints(years)

	cveDocs := []models.Cve{}

	for _, year := range years {
		sort.Strings(cveMap[year])
		for i := range cveMap[year] {
			data, err := ProcessJSONFile(cveMap[year][i])
			if err != nil {
				panic(fmt.Sprintf("Unmarshalling failure %v", err))
			}

			cve := models.Cve{
				Cve_id:      data.CveMetaData.Cve_id,
				DateUpdated: parseDataUpdated(data.CveMetaData.DateUpdated, data.CveMetaData.DatePublished),
				Data:        data.RawData,
			}

			cveDocs = append(cveDocs, cve)

			if len(cveDocs) >= constants.BATCH_SIZE {
				p.repository.BulkInsertCve(&cveDocs)
				cveDocs = nil
				
				batchCount++
				println(fmt.Sprintf("Processed %v records. Time since start(seconds): %v", 
					batchCount * constants.BATCH_SIZE, 
					time.Now().Sub(timeInit).Seconds()))
			}
		}
	}

	p.repository.BulkInsertCve(&cveDocs)
	cveDocs = nil
}

func parseDataUpdated(updated string, published string) time.Time {
	if len(updated) == 0 {
		updated = published
	}

	if result, err := util.ParseTime(updated); err != nil {
		panic(fmt.Sprintf("Time parsing failure %v", err))
	} else {
		return result
	}
}

func Unzip(src, dest string) error {
	timeInit := time.Now()
	r, err := zip.OpenReader(src)
	if err != nil {
		return err
	}
	defer r.Close()

	for _, f := range r.File {
		filePath := filepath.Join(dest, f.Name)

		if f.FileInfo().IsDir() {
			// If the current item is a directory, create it.
			if err := os.MkdirAll(filePath, os.ModePerm); err != nil {
				return err
			}
			continue
		}

		// Ensure the parent directory exists for the file.
		if err := os.MkdirAll(filepath.Dir(filePath), os.ModePerm); err != nil {
			return err
		}

		// Create the file.
		dstFile, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, f.Mode())
		if err != nil {
			return err
		}

		// Open the zipped file.
		srcFile, err := f.Open()
		if err != nil {
			return err
		}

		// Copy the file content to the destination file.
		if _, err := io.Copy(dstFile, srcFile); err != nil {
			return err
		}

		dstFile.Close()
		srcFile.Close()
	}

	println(fmt.Sprintf("Unzipped %v in %v seconds", src, time.Now().Sub(timeInit).Seconds()))
	return nil
}

func WalkAndProcessJSON(root string, mapByYear map[int][]string) error {
	return filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if filepath.Ext(path) == ".json" && info.Name() != "delta.json" && info.Name() != "deltaLog.json" {
			year, _ := strconv.Atoi(filepath.Base(filepath.Dir(filepath.Dir(path))))
			mapByYear[year] = append(mapByYear[year], fmt.Sprintf("%v", path))
		}

		return nil
	})
}

type CveMetadata struct {
	Cve_id        string `json:"cveId"`
	DateUpdated   string `json:"dateUpdated"`
	DatePublished string `json:"datePublished"`
}

type Data struct {
	CveMetaData CveMetadata     `json:"cveMetadata"`
	RawData     json.RawMessage `json:"others"`
}

func ProcessJSONFile(path string) (*Data, error) {
	content, err := os.ReadFile(path)
	if err != nil {
		return nil, err
	}

	var data Data
	if err := json.Unmarshal(content, &data); err != nil {
		return nil, err
	}

	data.RawData = json.RawMessage(content)

	return &data, nil
}
