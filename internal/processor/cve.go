package processor

import (
	"fmt"
	"sort"
	"time"

	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/constants"
	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/helper"
	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/models"
	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/repository"
)

var Repo repository.Repository

func ProcessCveMap(cveMap map[int][]string) { // TODO: PROGRESS TRACKING LOGIC
	var batchCount int = 0
	var timeInit time.Time = time.Now()
	var years []int
	for k := range cveMap {
		sort.Strings(cveMap[k])
		years = append(years, k)
	}

	sort.Ints(years)

	cveDocs := []models.Cve{}

	for _, year := range years {
		sort.Strings(cveMap[year])
		for i := range cveMap[year] {
			data, err := helper.ProcessJSONFile(cveMap[year][i])
			if err != nil {
				panic(fmt.Sprintf("Unmarshalling failure %v", err))
			}

			cve := models.Cve{
				Cve_id:      data.CveMetaData.Cve_id,
				DateUpdated: parseDatePublished(data.CveMetaData.DateUpdated, data.CveMetaData.DatePublished),
				Data:        data.RawData,
			}

			cveDocs = append(cveDocs, cve)

			if len(cveDocs) >= constants.BATCH_SIZE {
				Repo.BulkInsertCve(&cveDocs)
				cveDocs = nil
				
				batchCount++
				println(fmt.Sprintf("Processed %v records. Time since start(seconds): %v", 
					batchCount * constants.BATCH_SIZE, 
					time.Now().Sub(timeInit).Seconds()))
			}
		}
	}

	Repo.BulkInsertCve(&cveDocs)
	cveDocs = nil
}

func parseDatePublished(updated string, published string) time.Time {

	var dateUpdated time.Time

	if len(updated) == 0 {
		updated = published
	}

	timeLayouts := []string{
		"2006-01-02T15:04:05",
		"2006-01-02T15:04:05Z",
		"2006-01-02T15:04:05.000Z",
	}

	var timeParseErr error
	for _, layout := range timeLayouts {
		dateUpdated, timeParseErr = time.Parse(layout, updated)
		if timeParseErr == nil {
			break
		}
	}

	if timeParseErr != nil {
		panic(fmt.Sprintf("Error Parsing Time : %v", timeParseErr))
	}

	dateUpdated = dateUpdated.UTC()
	return dateUpdated
}
