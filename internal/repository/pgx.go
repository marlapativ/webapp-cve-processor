package repository

import (
	"context"
	"fmt"
	"strconv"
	"time"

	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/constants"
	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/models"
	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/util"
	"github.com/csye7125-su24-team06/webapp-cve-processor/pkg/database"
	"github.com/jackc/pgx/v5"
)

type pgxRepository struct{
	dataSource database.PgxDataSource
}

func NewPgxRepository(dataSource database.PgxDataSource) CveRepository {
	return &pgxRepository{
		dataSource: dataSource,
	}
}

func (pg *pgxRepository) BulkInsertCve(cveDocs []models.Cve) {
	timeInit := time.Now()
	tableIdentifier := []string{"cve", "cves"}
	copyFrom := pgx.CopyFromSlice(len(cveDocs), func(i int) ([]any, error) {
		return []any{ cveDocs[i].Cve_id, cveDocs[i].DateUpdated, cveDocs[i].Data }, nil
	})
	_, err := pg.dataSource.Get().CopyFrom(context.Background(), tableIdentifier, []string{"cve_id", "date_updated", "data"}, copyFrom)
	if err != nil {
		panic(err)
	}
	fmt.Println("Time taken to insert records: ", time.Since(timeInit).Seconds())
}

func (pg *pgxRepository) GetDefaultBatchSize() int {
	if util.EnvExists("PGX_BATCH_SIZE") {
		res, err := strconv.Atoi(util.GetEnvOrDefault("PGX_BATCH_SIZE", "-"))
		if err != nil {
			panic(err)
		}
		return res
	}
	return constants.PGX_BATCH_SIZE
}
