package repository

import (
	"fmt"
	"strconv"
	"time"

	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/constants"
	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/models"
	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/util"
	"github.com/csye7125-su24-team06/webapp-cve-processor/pkg/database"

	"gorm.io/gorm/clause"
)

type gormRepository struct{
	dataSource database.GormDataSource
}

func NewGormRepository(dataSource database.GormDataSource) CveRepository {
	return &gormRepository{
		dataSource: dataSource,
	}
}

func (gr *gormRepository) InsertCve(cveDoc interface{}) {
	gr.dataSource.Get().Create(&cveDoc)
}

func (gr *gormRepository) BulkInsertCve(cveDocs []models.Cve) {
	timeInit := time.Now()
	result := gr.dataSource.Get().Clauses(clause.OnConflict{DoNothing: true}).Create(cveDocs)
	if result.Error != nil {
		panic(result.Error)
	}
	fmt.Printf("Time taken to insert %v records: %v\n", result.RowsAffected, time.Since(timeInit).Seconds())
}

func (gr *gormRepository) FindCves(cveId string) (interface{}) {
	var cveDoc models.Cve
	gr.dataSource.Get().Where("cve_id = ?", cveId).Order("date_updated DESC").Limit(1).First(&cveDoc)
	return cveDoc
}

func (pg *gormRepository) GetDefaultBatchSize() int {
	if util.EnvExists("GORM_BATCH_SIZE") {
		res, err := strconv.Atoi(util.GetEnvOrDefault("GORM_BATCH_SIZE", "-"))
		if err != nil {
			panic(err)
		}
		return res
	}
	return constants.GORM_BATCH_SIZE
}
