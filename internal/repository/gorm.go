package repository

import (
	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/models"
	"github.com/csye7125-su24-team06/webapp-cve-processor/pkg/database"

	"gorm.io/gorm/clause"
)

type gormRepository struct{
	dataSource database.GormDataSource
}

func NewGormRepository(dataSource database.GormDataSource) Repository {
	return &gormRepository{
		dataSource: dataSource,
	}
}

func (gr *gormRepository) InsertCve(cveDoc interface{}) {
	gr.dataSource.Get().Create(&cveDoc)
}

func (gr *gormRepository) BulkInsertCve(cveDocs interface{}) {
	result := gr.dataSource.Get().Clauses(clause.OnConflict{DoNothing: true}).Create(cveDocs)
	if result.Error != nil {
		panic(result.Error)
	}
}

func (gr *gormRepository) FindCves(cveId string) (interface{}) {
	var cveDoc models.Cve
	gr.dataSource.Get().Where("cve_id = ?", cveId).Order("date_updated DESC").Limit(1).First(&cveDoc)
	return cveDoc
}
