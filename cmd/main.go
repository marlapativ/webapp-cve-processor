package main

import (
	"fmt"
	"os"
	"os/signal"
	"syscall"

	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/processor"
	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/repository"
	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/util"
	"github.com/csye7125-su24-team06/webapp-cve-processor/pkg/database"

	"github.com/joho/godotenv"
)

func main() {
	// Load Environment Variables
	godotenv.Load()

	// Download
	fmt.Println("Downloading Zip...")
	downloadDir := util.GetEnvOrDefault("DOWNLOAD_DIR", "./cve-list")
	url := util.GetEnvOrDefault("CVE_LIST_URL", "https://github.com/CVEProject/cvelistV5/archive/refs/heads/main.zip")
	zipFilePath := util.DownloadFromUrl(url, downloadDir)
	fmt.Printf("Downloaded file path : %v\n", zipFilePath)

	// Process
	repo := getRepository()	
	processor := processor.NewCveProcessor(repo)
	processor.Process(zipFilePath)
	
	// Wait for signal
	fmt.Println("Done...")
	wait := make(chan int, 1)
	<-wait
}

func getRepository() repository.CveRepository{
	if util.GetEnvOrDefault("DB_ORM", "gorm") == "gorm" {
		fmt.Println("Processing using gorm data source...")
		gormDataSource := database.NewPostgresGormDataSource()
		gracefulShutdownDbConnection(gormDataSource)
		return repository.NewGormRepository(gormDataSource)
	} else {
		fmt.Println("Processing using pgx data source...")
		pgxDataSource := database.NewPostgresPgxDataSource()
		gracefulShutdownDbConnection(pgxDataSource)
		return repository.NewPgxRepository(pgxDataSource)
	}
}

func gracefulShutdownDbConnection(ds database.CloseableDataSource) {
	sigc := make(chan os.Signal, 1)
	signal.Notify(sigc,
		syscall.SIGHUP,
		syscall.SIGINT,
		syscall.SIGTERM,
		syscall.SIGQUIT)

	go func() {
		<-sigc

		fmt.Println("Disconnecting Database...")
		if err := ds.Close(); err != nil {
			fmt.Println("DB Connection was not closed")
			os.Exit(0)
		}

		fmt.Println("Cleanup Completed!")
		os.Exit(0)
	}()
}
