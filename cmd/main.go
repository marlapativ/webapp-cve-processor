package main

import (
	"fmt"
	"os"
	"os/signal"
	"syscall"

	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/helper"
	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/processor"
	"github.com/csye7125-su24-team06/webapp-cve-processor/internal/repository"
	"github.com/csye7125-su24-team06/webapp-cve-processor/pkg/database"

	"github.com/joho/godotenv"
)

func main() {
	godotenv.Load()
	
	// Database Setup
	dataSource := database.NewPostgresGormDataSource()
	repository := repository.NewGormRepository(dataSource)
	handleSignal(dataSource)

	// Download
	fmt.Println("Downloading Zip...")
	downloadDir := getEnv("DOWNLOAD_DIR", "/tmp/cve-list")
	url := getEnv("CVE_LIST_URL", "https://github.com/CVEProject/cvelistV5/archive/refs/heads/main.zip")
	zipFilePath := downloadData(url, downloadDir)

	// Process 
	fmt.Println("Processing...")
	if err := helper.Unzip(zipFilePath, downloadDir); err != nil {
		panic(fmt.Sprintf("Cve list unzipping failed : %v", err))
	}

	cveMap := make(map[int][]string)
	helper.WalkAndProcessJSON(downloadDir, cveMap)

	fmt.Println("Inserting records...")
	processor.Repo = repository
	processor.ProcessCveMap(cveMap)
	fmt.Println("Done...")

	wait := make(chan int, 1)
	<-wait
}

func downloadData(url string, downloadDir string) string {
	if err := os.MkdirAll(downloadDir, 0755); err != nil {
		panic(fmt.Sprintf("Directory creation Failure : %v", err))
	}

	downloadFilePath := fmt.Sprintf("%v/cve.zip", downloadDir)
	if err := helper.DownloadFile(url, downloadFilePath); err != nil {
		panic(fmt.Sprintf("Cve list download failed : %v", err))
	}
	return downloadFilePath
}

func getEnv(key, fallback string) string {
    if value, ok := os.LookupEnv(key); ok {
        return value
    }
    return fallback
}

func handleSignal(dataSource database.GormDataSource) {
	sigc := make(chan os.Signal, 1)
	signal.Notify(sigc,
		syscall.SIGHUP,
		syscall.SIGINT,
		syscall.SIGTERM,
		syscall.SIGQUIT)

	go func() {
		<-sigc

		fmt.Println("Disconnecting Database...")

		pgDB, err := dataSource.Get().DB()
		if err != nil {
			fmt.Println("DB Object not found")
			os.Exit(0)
		}

		if err = pgDB.Ping(); err != nil {
			fmt.Println("DB Connection was not established")
			os.Exit(0)
		}

		if err = pgDB.Close(); err != nil {
			fmt.Println("DB Connection was not closed")
			os.Exit(0)
		}

		fmt.Println("Cleanup Completed!")
		os.Exit(0)
	}()
}
